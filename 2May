Regular expression
-----------------
>> Pattern match.
>> Search pattern 

--> A regular expression is a sequence of charecters that 
forms a search pattern. 
--> The search pattern can be used for text search and text 
replace operations. 

--> What is a Regular Expression
--------------------------------
When you seacrch for data in a text, you can use this search pattern
to describe what you are searhing for. 

A regular expression can be a single charecter or a more complicated
pattern. 
Regular expressions can be used to perform all types of text search.
and ext replacement.

Syntax:
=======
re
/pattern/modifiers


in order to use the re we have two string methods.
1. search() ---> method uses an expression to search for a match 
		and returns the position of the match.
2. replace() ---> mwthod retuns a modified string where the pattern
		is replaced. 

replace("original pattern","replaceable pattern")

Regular expression modifiers
-----------------------------
1. i :--> Perform case-insensitive matching
2. g :--> Perform a global match(finds all matches rather than stopping
		after the first match)
3. m :--> Perform multiline matching.



^ <--- except 

Note: RE is mainly used to match the pattern.
we different ways to do the same 

if you wanted know only the index place == search()
if you wanted to store the element in array[] == match()
if you wanted to replace any patter in given str == replace('','')

Regular expression pattern
---------------------------
[] :---> find any of the charecter between the brackets.
[^] :--> except the charecters find any thing out of that. 
[abc] :---> find any of the charecter between a to c.
[^abc ]:---> find any of the charecter out of a to c.
() :---> Find any of the alternatives separated. | 

Regular expression's metacharecters
------------------------------------
1. \d ===> fiding a digit in the pattern
	\D ===> Matches any non-decimal digit.
2. \s ===> finding a whitespace charecter
3. \b ===> find a match at the begining of a word 
4. \uxxxx ====> find the Unicode charecter speccified by the
		hexadecimanl number xxxx


Metacharecters
---------------
[].^$*+?{}()\|


. - period :==> a period matches any single charecter
except newline. 

search for 'a'
.. a ----------> XXXXXXX 
.. ac ---------> 1 match
.. acd --------> 1 match
.. acde -------> 2 macthes


^ - caret : The carent symbol is used to check if a string
starts with a certain character.
----------
^a     == a == 1 match
^abc   == abc == 1 match
^ab    == abc == 1 match

$ - dollar : The dollar symbol us used to check if a string ends
with certain charecter.

a$     a   	1 match
	cab 	1 match
	tab 	1 match
	answer 	1 match


* star : The star symbol matches zero or more occurrence of the 
	patern left to it.

ma*n 	mn == 1match
	man == 1match
	mann == 1match

+ plus : The plus symbol matches one or more occurrences of 
the pattern left to it.

ma+n mn ====> no match ( no 'a' charecter)
	man ===> 1 match
	mann ==> 1 match
	main ==> No match ( a is not followed by n)
	woman ==> 1 match 
 

construct re

const regex = "abcdefghi";
const reg = new Regexp('')

Methods involved in the regular expressipons
--------------------------------------------
1. search() 
2. replace()
3. match()
4. matchAll() : Returns an iterator containing all of the matches.
5. exec() : Executes a search for a match in a string and returns an
		array of information.it returns null on a mismatch.
6. split() : Break a string into an array of substring. 
7. test() : Tests for a match in a string and returns true or false. 

***********************************************************************
developers.mozilla.org


>> JavaScript(JS) and EcmaScript(ES)
------------------------------------
ES6
----
Variable blocks
function object
constructors and this operators
import and export 

Javascript arrow functions
==========================
>> Simplified implementation of general functions.

function functionname(a,b){
	return a*b;
}
functionname(10,20) ===> 10*20 = 200

//using arrow functions

let functionname = () => Expression that's wanted to be executed.

let mul = (a,b) => a*b; return a*b;
